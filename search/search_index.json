{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Some example pages... For MkDocs Material full documentation visit squidfunk.github.io/mkdocs-material . For MkDocs full documentation visit mkdocs.org . Code blocks Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter. Configuration This configuration enables syntax highlighting on code blocks and inline code blocks, and allows to include source code directly from other files. Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences The following sections discuss how to use different syntax highlighting features with Pygments , the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter. See additional configuration options: Highlight InlineHilite SuperFences Snippets Code annotations 8.0.0 \u00b7 Feature flag \u00b7 Experimental Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to mkdocs.yml to enable them globally: theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Enabling code annotations for a specific code block If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension: ``` { .yaml .annotate } # Code block content ``` Note that the language shortcode which has to come first must now also be prefixed by a . . Usage Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language: Code block ```py import tensorflow as tf ``` import tensorflow as tf Adding a title 7.3.6 \u00b7 Experimental In order to provide additional context, a custom title can be added to a code block by using the title=\"<custom title>\" option directly after the shortcode, e.g. to display the name of a file: Code block with title ```py title=\"bubble_sort.py\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Adding annotations Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in // ... and /* ... */ , for YAML in # ... , etc. 1 : Code block with annotation ```yaml theme : features : - content.code.annotate # (1) ``` 1. :man_raising_hand: I'm a code annotation! I can contain `code` , **formatted text**, images, ... basically anything that can be written in Markdown. theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Adding line numbers Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the shortcode, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows to split large code blocks for readability: Code block with line numbers ```py linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting specific lines Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language shortcode. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums : Code block with highlighted lines ```py hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting inline code blocks When InlineHilite is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. #! , directly followed by the corresponding language shortcode . Inline code block The `#!python range()` function is used to generate a sequence of numbers. The range () function is used to generate a sequence of numbers. Embedding external files When Snippets is enabled, content from other files (including source files) can be embedded by using the --8<-- notation directly from within a code block: Code block with external content ```title=\".browserslistrc\" --8<--\u200b \".browserslistrc\" ``` .browserslistrc last 4 years Code annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines. \u21a9","title":"Home"},{"location":"#code-blocks","text":"Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter.","title":"Code blocks"},{"location":"#configuration","text":"This configuration enables syntax highlighting on code blocks and inline code blocks, and allows to include source code directly from other files. Add the following lines to mkdocs.yml : markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences The following sections discuss how to use different syntax highlighting features with Pygments , the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter. See additional configuration options: Highlight InlineHilite SuperFences Snippets","title":"Configuration"},{"location":"#code-annotations","text":"8.0.0 \u00b7 Feature flag \u00b7 Experimental Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to mkdocs.yml to enable them globally: theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. Enabling code annotations for a specific code block If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension: ``` { .yaml .annotate } # Code block content ``` Note that the language shortcode which has to come first must now also be prefixed by a . .","title":"Code annotations"},{"location":"#usage","text":"Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language: Code block ```py import tensorflow as tf ``` import tensorflow as tf","title":"Usage"},{"location":"#adding-a-title","text":"7.3.6 \u00b7 Experimental In order to provide additional context, a custom title can be added to a code block by using the title=\"<custom title>\" option directly after the shortcode, e.g. to display the name of a file: Code block with title ```py title=\"bubble_sort.py\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding a title"},{"location":"#adding-annotations","text":"Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in // ... and /* ... */ , for YAML in # ... , etc. 1 : Code block with annotation ```yaml theme : features : - content.code.annotate # (1) ``` 1. :man_raising_hand: I'm a code annotation! I can contain `code` , **formatted text**, images, ... basically anything that can be written in Markdown. theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown.","title":"Adding annotations"},{"location":"#adding-line-numbers","text":"Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the shortcode, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows to split large code blocks for readability: Code block with line numbers ```py linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding line numbers"},{"location":"#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language shortcode. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums : Code block with highlighted lines ```py hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Highlighting specific lines"},{"location":"#highlighting-inline-code-blocks","text":"When InlineHilite is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. #! , directly followed by the corresponding language shortcode . Inline code block The `#!python range()` function is used to generate a sequence of numbers. The range () function is used to generate a sequence of numbers.","title":"Highlighting inline code blocks"},{"location":"#embedding-external-files","text":"When Snippets is enabled, content from other files (including source files) can be embedded by using the --8<-- notation directly from within a code block: Code block with external content ```title=\".browserslistrc\" --8<--\u200b \".browserslistrc\" ``` .browserslistrc last 4 years Code annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines. \u21a9","title":"Embedding external files"},{"location":"browser-support/","text":"Browser support Material for MkDocs goes at great lengths to support the largest possible range of browsers while retaining the simplemost possibilities for customization via modern CSS features like custom properties and mask images . Supported browsers The following table lists all browsers for which Material for MkDocs offers full support, so it can be assumed that all features work without degradation. If you find a feature not to be working in a browser in the supported version range, please open an issue : Browser Version Release date Usage desktop mobile overall Chrome 49+ 03/2016 25.65% 38.33% 63.98% Safari 10+ 09/2016 4.63% 14.96% 19.59% Edge 79+ 01/2020 3.95% n/a 3.95% Firefox 53+ 04/2017 3.40% .30% 3.70% Opera 36+ 03/2016 1.44% .01% 1.45% 92.67% Browser support matrix sourced from caniuse.com . 1 Note that the usage data is based on global browser market share, so it could in fact be entirely different for your target demographic. It's a good idea to check the distribution of browser types and versions among your users. Other browsers Albeit your site might not look as perfect as when viewed with a modern browser, the following older browser versions might work with some additional effort: Firefox 31-52 \u2013 icons will render as little boxes due to missing support for mask images . While this cannot be polyfilled, it might be mitigated by hiding icons with additional CSS . Edge 16-18 \u2013 the spacing of some elements might be a little of due to missing support for the :is pseudo selector , which can be mitigated with some additional CSS . Internet Explorer - no support, mainly due to missing support for custom properties . The last version of Material for MkDocs to support Internet Explorer is 4.6.3 . The data was collected from caniuse.com in January 2022, and is primarily based on browser support for custom properties , mask images and the :is pseudo selector which are not entirely polyfillable. Browsers with a cumulated market share of less than 1% were not considered, but might still be fully or partially supported. \u21a9","title":"Browser support"},{"location":"browser-support/#browser-support","text":"Material for MkDocs goes at great lengths to support the largest possible range of browsers while retaining the simplemost possibilities for customization via modern CSS features like custom properties and mask images .","title":"Browser support"},{"location":"browser-support/#supported-browsers","text":"The following table lists all browsers for which Material for MkDocs offers full support, so it can be assumed that all features work without degradation. If you find a feature not to be working in a browser in the supported version range, please open an issue : Browser Version Release date Usage desktop mobile overall Chrome 49+ 03/2016 25.65% 38.33% 63.98% Safari 10+ 09/2016 4.63% 14.96% 19.59% Edge 79+ 01/2020 3.95% n/a 3.95% Firefox 53+ 04/2017 3.40% .30% 3.70% Opera 36+ 03/2016 1.44% .01% 1.45% 92.67% Browser support matrix sourced from caniuse.com . 1 Note that the usage data is based on global browser market share, so it could in fact be entirely different for your target demographic. It's a good idea to check the distribution of browser types and versions among your users.","title":"Supported browsers"},{"location":"browser-support/#other-browsers","text":"Albeit your site might not look as perfect as when viewed with a modern browser, the following older browser versions might work with some additional effort: Firefox 31-52 \u2013 icons will render as little boxes due to missing support for mask images . While this cannot be polyfilled, it might be mitigated by hiding icons with additional CSS . Edge 16-18 \u2013 the spacing of some elements might be a little of due to missing support for the :is pseudo selector , which can be mitigated with some additional CSS . Internet Explorer - no support, mainly due to missing support for custom properties . The last version of Material for MkDocs to support Internet Explorer is 4.6.3 . The data was collected from caniuse.com in January 2022, and is primarily based on browser support for custom properties , mask images and the :is pseudo selector which are not entirely polyfillable. Browsers with a cumulated market share of less than 1% were not considered, but might still be fully or partially supported. \u21a9","title":"Other browsers"},{"location":"customization/","text":"Customization Project documentation is as diverse as the projects themselves and Material for MkDocs is a great starting point for making it look beautiful. However, as you write your documentation, you may reach a point where small adjustments are necessary to preserve your brand's style. Adding assets MkDocs provides several ways to customize a theme. In order to make a few small tweaks to Material for MkDocs, you can just add CSS and JavaScript files to the docs directory. Additional CSS If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate style sheet. The easiest way is by creating a new style sheet file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : extra_css : - stylesheets/extra.css Additional JavaScript If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : extra_javascript : - javascripts/extra.js Extending the theme If you want to alter the HTML source (e.g. add or remove some parts), you can extend the theme. MkDocs supports theme extension , an easy way to override parts of Material for MkDocs without forking from git. This ensures that you can update to the latest version more easily. Setup and theme structure Enable Material for MkDocs as usual in mkdocs.yml , and create a new folder for overrides which you then reference using the custom_dir setting: theme : name : material custom_dir : overrides Theme extension prerequisites As the custom_dir setting is used for the theme extension process, Material for MkDocs needs to be installed via pip and referenced with the name setting in mkdocs.yml . It will not work when cloning from git . The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript files \u2502 \u2514\u2500 stylesheets/ # Style sheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics/ # Analytics integrations \u2502 \u2502 \u2514\u2500 analytics.html # Analytics setup \u2502 \u251c\u2500 languages/ # Translation languages \u2502 \u251c\u2500 content.html # Page content \u2502 \u251c\u2500 copyright.html # Copyright and theme information \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Translation setup \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search interface \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-file.html # Source file information \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page Overriding partials In order to override a partial, we can replace it with a file of the same name and location in the overrides directory. For example, to replace the original footer.html partial, create a new footer.html partial in the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 partials/ \u2502 \u2514\u2500 footer.html \u2514\u2500 mkdocs.yml MkDocs will now use the new partial when rendering the theme. This can be done with any file. Overriding blocks recommended Besides overriding partials, it's also possible to override (and extend) template blocks, which are defined inside the templates and wrap specific features. In order to set up block overrides, create a main.html file inside the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml Then, e.g. to override the site title, add the following lines to main.html : {% extends \"base.html\" %} {% block htmltitle %} < title > Lorem ipsum dolor sit amet </ title > {% endblock %} The following template blocks are provided by the theme: Block name Purpose analytics Wraps the Google Analytics integration announce Wraps the announcement bar config Wraps the JavaScript application config content Wraps the main content extrahead Empty block to add custom meta tags fonts Wraps the font definitions footer Wraps the footer with navigation and copyright header Wraps the fixed header bar hero Wraps the hero teaser (if available) htmltitle Wraps the <title> tag libs Wraps the JavaScript libraries (header) outdated Wraps the version warning scripts Wraps the JavaScript application (footer) site_meta Wraps the meta tags in the document head site_nav Wraps the site navigation and table of contents styles Wraps the style sheets (also extra sources) tabs Wraps the tabs navigation (if available)","title":"Customization"},{"location":"customization/#customization","text":"Project documentation is as diverse as the projects themselves and Material for MkDocs is a great starting point for making it look beautiful. However, as you write your documentation, you may reach a point where small adjustments are necessary to preserve your brand's style.","title":"Customization"},{"location":"customization/#adding-assets","text":"MkDocs provides several ways to customize a theme. In order to make a few small tweaks to Material for MkDocs, you can just add CSS and JavaScript files to the docs directory.","title":"Adding assets"},{"location":"customization/#additional-css","text":"If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate style sheet. The easiest way is by creating a new style sheet file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : extra_css : - stylesheets/extra.css","title":"Additional CSS"},{"location":"customization/#additional-javascript","text":"If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Then, add the following lines to mkdocs.yml : extra_javascript : - javascripts/extra.js","title":"Additional JavaScript"},{"location":"customization/#extending-the-theme","text":"If you want to alter the HTML source (e.g. add or remove some parts), you can extend the theme. MkDocs supports theme extension , an easy way to override parts of Material for MkDocs without forking from git. This ensures that you can update to the latest version more easily.","title":"Extending the theme"},{"location":"customization/#setup-and-theme-structure","text":"Enable Material for MkDocs as usual in mkdocs.yml , and create a new folder for overrides which you then reference using the custom_dir setting: theme : name : material custom_dir : overrides Theme extension prerequisites As the custom_dir setting is used for the theme extension process, Material for MkDocs needs to be installed via pip and referenced with the name setting in mkdocs.yml . It will not work when cloning from git . The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript files \u2502 \u2514\u2500 stylesheets/ # Style sheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics/ # Analytics integrations \u2502 \u2502 \u2514\u2500 analytics.html # Analytics setup \u2502 \u251c\u2500 languages/ # Translation languages \u2502 \u251c\u2500 content.html # Page content \u2502 \u251c\u2500 copyright.html # Copyright and theme information \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Translation setup \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search interface \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-file.html # Source file information \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page","title":"Setup and theme structure"},{"location":"customization/#overriding-partials","text":"In order to override a partial, we can replace it with a file of the same name and location in the overrides directory. For example, to replace the original footer.html partial, create a new footer.html partial in the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 partials/ \u2502 \u2514\u2500 footer.html \u2514\u2500 mkdocs.yml MkDocs will now use the new partial when rendering the theme. This can be done with any file.","title":"Overriding partials"},{"location":"customization/#overriding-blocks-recommended","text":"Besides overriding partials, it's also possible to override (and extend) template blocks, which are defined inside the templates and wrap specific features. In order to set up block overrides, create a main.html file inside the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml Then, e.g. to override the site title, add the following lines to main.html : {% extends \"base.html\" %} {% block htmltitle %} < title > Lorem ipsum dolor sit amet </ title > {% endblock %} The following template blocks are provided by the theme: Block name Purpose analytics Wraps the Google Analytics integration announce Wraps the announcement bar config Wraps the JavaScript application config content Wraps the main content extrahead Empty block to add custom meta tags fonts Wraps the font definitions footer Wraps the footer with navigation and copyright header Wraps the fixed header bar hero Wraps the hero teaser (if available) htmltitle Wraps the <title> tag libs Wraps the JavaScript libraries (header) outdated Wraps the version warning scripts Wraps the JavaScript application (footer) site_meta Wraps the meta tags in the document head site_nav Wraps the site navigation and table of contents styles Wraps the style sheets (also extra sources) tabs Wraps the tabs navigation (if available)","title":"Overriding blocks recommended"},{"location":"license/","text":"License Material for MkDocs (HigorLoren Template) MIT License Copyright (c) 2022 Higor Lorenzon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"","title":"License"},{"location":"license/#material-for-mkdocs-higorloren-template","text":"","title":"Material for MkDocs (HigorLoren Template)"},{"location":"license/#mit-license","text":"Copyright (c) 2022 Higor Lorenzon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"}]}